ceRNA Pipeline

A comprehensive Snakemake-based bioinformatics pipeline for identifying and analyzing competing endogenous RNA (ceRNA) networks from RNA-seq data. This pipeline integrates quality control, normalization, feature engineering, machine learning prediction, statistical validation, and network visualization to discover ceRNA interactions.

🧬 Overview
The ceRNA pipeline processes RNA-seq count data to identify lncRNA-miRNA-mRNA regulatory networks using:

Database Integration: miRTarBase 2025 and starBase/ENCORI for miRNA-target interactions

Machine Learning: XGBoost classifier for ceRNA triplet prediction

Statistical Validation: Mediation analysis with Sobel testing

Network Analysis: GraphML/SIF/CSV exports for Cytoscape visualization

Interactive Reports: HTML reports with embedded network visualizations

Key Features
✅ Handles both synthetic and real RNA-seq datasets

✅ Automated miRNA name standardization

✅ Robust error handling for empty datasets

✅ Multiple output formats (GraphML, SIF, CSV)

✅ Interactive HTML reports with Plotly networks

✅ Cytoscape-compatible network files

✅ Excel-friendly CSV exports

📋 Table of Contents
Installation

Database Setup

Quick Start

Input Files

Output Files

Pipeline Workflow

Configuration

Troubleshooting

Examples

Contributing

License

🚀 Installation
Prerequisites
Operating System: Linux/macOS (tested on Ubuntu 20.04/WSL2)

Python: 3.9 or higher

Conda/Mamba: For environment management

Setup
Clone the repository

bash
git clone https://github.com/your-username/cerna-pipeline.git
cd cerna-pipeline
Create conda environment

bash
conda env create -f environment.yml
conda activate cerna-pipeline
Install additional dependencies

bash
pip install -r requirements.txt
📊 Database Setup
Required Database Files
The pipeline requires three main database files. Download them from the following sources:

1. miRTarBase (miRNA-mRNA interactions)
Source: miRTarBase 2025

bash
# Download the latest miRTarBase file
# Visit: https://mirtarbase.cuhk.edu.cn/
# Look for "Download" section and get the MTI file (Excel or text format)
# Save as: databases/miRTarBase_MTI.txt

# Expected format: miRNA\tTarget Gene\tExperiment\t...
# Example columns: miRNA, Target, Species, Experiments, Support Type
2. starBase/ENCORI (miRNA-lncRNA interactions)
Source: starBase/ENCORI

bash
# Download miRNA-lncRNA interaction data
# Visit: https://rnasysu.com/encori/
# Navigate to "miRNA Target" > "Download"
# Select: miRNA-lncRNA interactions for human
# Save as: databases/starBase_miRNA_lncRNA.txt

# Expected format: miRNA\tlncRNA\tSpecies\t...
# You can also use their API:
# curl 'http://rna.sysu.edu.cn/encori/api/miRNATarget/?assembly=hg19&geneType=lncRNA' > starBase_data.txt
3. Ensembl Gene Annotations
Source: Ensembl FTP

bash
# Download GTF annotation file
wget https://ftp.ensembl.org/pub/release-110/gtf/homo_sapiens/Homo_sapiens.GRCh38.110.gtf.gz
gunzip Homo_sapiens.GRCh38.110.gtf.gz

# Convert GTF to gene annotation CSV
# This can be done with a simple script or manually:
# Required columns: gene_id, gene_name, gene_biotype
# Example:
# gene_id,gene_name,gene_biotype
# ENSG00000000003,TSPAN6,protein_coding
# ENSG00000000005,TNMD,protein_coding
# ENSG00000000457,SCYL3,protein_coding

# Save as: gene_annotation.csv
Process Database Files
After downloading the raw database files, process them for the pipeline:

bash
# This script converts raw database files to pipeline format
python modules/download_databases.py
This will create:

databases/miRTarBase.txt (processed miRNA-mRNA interactions)

databases/LncBase.txt (processed miRNA-lncRNA interactions)

databases/gene_annotation.csv (gene annotations)

🏃 Quick Start
Basic Usage
bash
# Run with your RNA-seq counts file
python cerna_pipeline_main.py --input your_counts.csv --threads 4

# For WSL/Windows users (add latency handling)
python cerna_pipeline_main.py --input your_counts.csv --threads 4
Standardize miRNA Names (if needed)
If your input file has non-standard miRNA names (e.g., "MIR21" instead of "hsa-miR-21-5p"):

bash
# Edit the script to specify your input/output files
python mirna_name_fix.py
Example with Test Data
bash
# Using provided test dataset
python cerna_pipeline_main.py --input GSE87340_standardized.csv --threads 4
📁 Input Files
Required Files
File	Description	Format
Raw Counts CSV	Gene expression matrix (genes×samples)	CSV with gene IDs as row names
miRTarBase_MTI.txt	miRNA-mRNA interactions	Tab-separated: miRNA, Target
starBase_miRNA_lncRNA.txt	miRNA-lncRNA interactions	Tab-separated: miRNA, lncRNA
gene_annotation.csv	Gene annotations from GTF	CSV: gene_id, gene_name, gene_biotype
Input Data Format
Your RNA-seq counts file should be structured as:

text
gene_id,sample1,sample2,sample3,...
ENSG00000000001,245,312,189,...
hsa-miR-21-5p,1523,1876,1234,...
ENSG00000000002,67,89,45,...
...
Important Notes:

Gene IDs should match those in your annotation file

miRNA names should follow standard nomenclature (e.g., hsa-miR-21-5p)

Use the standardization script if needed

📊 Output Files
All results are saved in the results/ directory:

Core Outputs
File	Description	Use Case
validated_triplets.csv	Statistically validated ceRNA triplets	Publication-ready results
cerna_analysis_report.html	Interactive HTML report	Quick visualization
cerna_network.graphml	Network in GraphML format	Cytoscape import
cerna_network.sif	Network in SIF format	Cytoscape import
cerna_network_nodes.csv	Network nodes (Excel-compatible)	Further analysis
cerna_network_edges.csv	Network edges (Excel-compatible)	Further analysis
Intermediate Files
File	Description
norm_counts.csv	Normalized expression matrix
features.pkl	Computed features for triplets
models.pkl	Trained XGBoost model
predicted_triplets.csv	ML-predicted triplets
centrality_scores.csv	Network centrality metrics
🔄 Pipeline Workflow
text
graph TD
    A[Raw Counts CSV] --> B[QC & Normalization]
    B --> C[Feature Engineering]
    C --> D[ML Training]
    D --> E[Predict Triplets]
    E --> F[Statistical Validation]
    F --> G[Network Analysis]
    G --> H[Generate Report]
    
    I[miRTarBase] --> C
    J[starBase/ENCORI] --> C
    K[Gene Annotations] --> C
    
    H --> L[HTML Report]
    G --> M[GraphML/SIF Files]
    G --> N[CSV Files]
Pipeline Steps
QC & Normalization: Filter low-expression genes, CPM normalization, log2 transformation

Feature Engineering: Load interactions, enumerate triplets, compute correlations and SPONGE scores

ML Training: Train XGBoost classifier on computed features

Predict Triplets: Score all candidate triplets using the trained model

Statistical Validation: Apply mediation analysis (Sobel test) to filter significant interactions

Network Analysis: Build ceRNA network, compute centralities, export multiple formats

Generate Report: Create interactive HTML report with embedded network visualization

⚙️ Configuration
Edit config/config.yaml to customize pipeline parameters:

text
# Normalization and filtering
low_count_threshold: 5          # Minimum counts per gene
sample_frac_threshold: 0.8      # Proportion of samples to keep gene
normalization_method: TMM       # TMM or RLE

# Statistical thresholds
confidence_threshold: 0.7       # ML confidence threshold
mediation_pval_cutoff: 0.05     # Mediation analysis p-value
partial_corr_cutoff: 0.15       # Partial correlation threshold

# Analysis parameters
feature_importance_top_n: 15    # Top features for model
random_seed: 42                 # Reproducibility
🔧 Troubleshooting
Common Issues
Empty Triplets/No Results
Cause: Gene name mismatch between input and databases

Solution: Use the miRNA standardization script or check gene IDs

Network Not Displaying in HTML Report
Cause: Missing Plotly dependencies or JavaScript issues

Solution: Ensure plotly is installed; try opening in different browser

Filesystem Errors (WSL/Windows)
Cause: File system latency in mounted drives

Solution: Add longer wait times or use native Linux environment

Dependencies Issues
bash
# Reinstall problematic packages
conda install -c conda-forge networkx plotly
pip install --upgrade statsmodels xgboost
Debug Mode
For detailed debugging, check Snakemake logs:

bash
ls .snakemake/log/
cat .snakemake/log/[latest-timestamp].snakemake.log
📖 Examples
Example 1: Basic Analysis
bash
# Process a standard RNA-seq dataset
python cerna_pipeline_main.py --input my_rnaseq_counts.csv --threads 8
Example 2: With Custom Configuration
bash
# Run with custom parameters
python cerna_pipeline_main.py \
  --input data/GSE87340_counts.csv \
  --config config/stringent_config.yaml \
  --threads 16
Example 3: Viewing Results
bash
# Open the HTML report
firefox results/cerna_analysis_report.html

# Import network into Cytoscape
# File > Import > Network from File > results/cerna_network.graphml
📈 Performance
Runtime: ~5-15 minutes for typical datasets (1000-5000 genes, 50-100 samples)

Memory: 2-8 GB RAM depending on dataset size

Storage: 100-500 MB for outputs

Development Setup
bash
git clone https://github.com/your-username/cerna-pipeline.git
cd cerna-pipeline
conda env create -f environment.yml
conda activate cerna-pipeline

